# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1
executors:
  java17:
    docker:
      - image: 'cimg/openjdk:17.0'

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@1.0.3
  codecov: codecov/codecov@3.3.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    working_directory: ~/repo
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    executor:
      name: android/android-machine
      
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # Set Fabric Api Key with environment variables
      - run:
          name: Resolve environment variables 
          command: echo "WEATHER_KEY=$WEATHER_API_KEY" >> ~/repo/local.properties

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Resolve dependencies 
          command: ./gradlew androidDependencies

      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      # Then start the emulator and run the Instrumentation tests!
      - android/start-emulator-and-run-tests:
          test-command: ./gradlew connectedDebugAndroidTest
          system-image: system-images;android-26;google_apis;x86

      # Store test results
      - store_artifacts:
          path: app/build/reports
          destination: reports

      - store_test_results:
          path: app/build/test-results

      # And finally run the release build
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  Running test cases:
    jobs:
      - build-and-test
